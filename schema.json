{
    "$id": "https://lora-alliance.org/about_lorawan",
    "$schema": "http://json-schema.org/draft_07/schema#",
    "title": "LoRaWAN FUOTA Manifest",
    "type": "object",
    "required": [
        "manifest_id",
        "manifest_version",
        "number_target_hardware",
        "target_hardware_versions",
        "firmware_version",
        "firmware_image_type",
        "firmware_data_type",
        "hash_algorithm_id",
        "signature_algorithm_id",
        "signature_size",
        "payload_signature"
    ],
    "properties": {
        "manifest_id": {
            "description": "The manifest package identifier, 4 is firmware management id",
            "type": "integer",
            "minimum": 0,
            "maximum": 255
        },
        "manifest_version": {
            "type": "integer",
            "minimum": 0,
            "maximum": 255
        },
        "number_target_hardware": {
            "description": "This should allow us to define multiple HW versions, but maybe there is a better solution!!",
            "type": "integer",
            "minimum": 0,
            "maximum": 255
        },
        "target_hardware_versions": {
            "type": "array",
            "minItems": 1,
            "items": {
                "type": "integer",
                "minimum": 0,
                "maximum": 4294967295
            }
        },
        "firmware_version": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4294967295
        },
        "firmware_image_type": {
            "type": "string",
            "enum": [
                "full",
                "delta"
            ]
        },
        "firmware_data_type": {
            "type": "string",
            "enum": [
                "uncompressed",
                "compressed"
            ]
        },
        "hash_algorithm_id": {
            "type": "string",
            "enum": [
                "MD5",
                "SHA_256"
            ]
        },
        "signature_algorithm_id": {
            "type": "string",
            "enum": [
                "DSA_PSS",
                "ECDSA",
                "HMAC",
                "AES_CBC"
            ]
        },
        "signature_size": {
            "description": "now it's one byte, but we might need to make it two or four bytes to ensure we cover all algorithms output sizes",
            "type": "integer",
            "minimum": 0,
            "maximum": 255
        },
        "payload_signature": {
            "type": "string",
            "contentEncoding": "binary"
        },
        "compression_type": {
            "description": "we need to define supported initial compression types, now using IETF ones",
            "type": "string",
            "enum": [
                "gzip",
                "bzip2",
                "deflate",
                "lz4",
                "lzma"
            ]
        },
        "diff_type": {
            "description": "we need to define supported diff types",
            "type": "string",
            "enum": [
                "jojodiff",
                "RMTD",
                "R3diff",
                "MoRE"
            ]
        },
        "target_firmware_version": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4294967295
        },
        "previous_image_size": {
            "type": "integer",
            "minimum": 0,
            "maximum": 4294967295
        },
        "previous_firmware_signature_size": {
            "description": "now it's one byte, but we might need to make it two or four bytes to ensure we cover all algorithms output sizes",
            "type": "integer",
            "minimum": 0,
            "maximum": 255
        },
        "previous_firmware_payload_signature": {
            "type": "string",
            "contentEncoding": "binary"
        },
        "app_info_size": {
            "description": "now it's one byte, but we might need to make it two to allow for more info",
            "type": "integer",
            "minimum": 0,
            "maximum": 255
        },
        "app_info_bytes": {
            "type": "string",
            "contentEncoding": "binary"
        }
    }
}