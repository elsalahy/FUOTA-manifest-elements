{
    "$id": "https://lora-alliance.org/about_lorawan",
    "$schema": "http://json-schema.org/draft_07/schema#",
    "title": "LoRaWAN FUOTA Manifest",
    "type": "object",
    "required": [
        "manifestId",
        "manifestVersion",
        "numberTargetHardware",
        "targetHardwareVersions",
        "firmwareVersion",
        "firmwareImageType",
        "firmwareDataType",
        "hashAlgorithmId",
        "signatureAlgorithmId",
        "signatureSize",
        "signatureValue"
    ],
    "properties": {
        "manifestId": {
            "description": "The manifest package identifier, 4 is firmware management id",
            "type": "integer",
            "minimum": 1,
            "maximum": 255
        },
        "manifestVersion": {
            "type": "integer",
            "minimum": 1,
            "maximum": 255
        },
        "numberTargetHardware": {
            "description": "This should allow us to define multiple HW versions, but maybe there is a better solution!!",
            "type": "integer",
            "minimum": 1,
            "maximum": 255
        },
        "targetHardwareVersions": {
            "type": "array",
            "minItems": 1,
            "items": {
                "type": "integer",
                "minimum": 1,
                "maximum": 4294967295
            }
        },
        "firmwareVersion": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4294967295
        },
        "firmwareImageType": {
            "type": "string",
            "enum": [
                "full",
                "delta"
            ]
        },
        "firmwareDataType": {
            "type": "string",
            "enum": [
                "uncompressed",
                "compressed"
            ]
        },
        "hashAlgorithmId": {
            "type": "string",
            "enum": [
                "MD5",
                "SHA256"
            ]
        },
        "signatureAlgorithmId": {
            "type": "string",
            "enum": [
                "DSAPSS",
                "ECDSA",
                "HMAC",
                "AESCBC"
            ]
        },
        "signatureSize": {
            "description": "now it's one byte, but we might need to make it two or four bytes to ensure we cover all algorithms output sizes",
            "type": "integer",
            "minimum": 1,
            "maximum": 255
        },
        "signatureValue": {
            "type": "string",
            "contentEncoding": "binary"
        },
        "compressionType": {
            "description": "we need to define supported initial compression types, now using IETF ones",
            "type": "string",
            "enum": [
                "gzip",
                "bzip2",
                "deflate",
                "lz4",
                "lzma"
            ]
        },
        "diffType": {
            "description": "we need to define supported diff types",
            "type": "string",
            "enum": [
                "jojodiff",
                "RMTD",
                "R3diff",
                "MoRE"
            ]
        },
        "targetFirmwareVersion": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4294967295
        },
        "previousImageSize": {
            "type": "integer",
            "minimum": 1,
            "maximum": 4294967295
        },
        "previousFirmwareSignatureSize": {
            "description": "now it's one byte, but we might need to make it two or four bytes to ensure we cover all algorithms output sizes",
            "type": "integer",
            "minimum": 1,
            "maximum": 255
        },
        "previousFirmwareSignatureValue": {
            "type": "string",
            "contentEncoding": "binary"
        },
        "appInfoSize": {
            "description": "now it's one byte, but we might need to make it two to allow for more info",
            "type": "integer",
            "minimum": 1,
            "maximum": 255
        },
        "appInfoBytes": {
            "type": "string",
            "contentEncoding": "binary"
        }
    }
}